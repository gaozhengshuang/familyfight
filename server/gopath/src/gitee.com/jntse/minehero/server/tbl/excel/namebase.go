// Generated by github.com/davyxu/tabtoy
// Version: 2.8.10
// DO NOT EDIT!!
package table

import (
	"fmt"
	"encoding/json"
	"io/ioutil"
)

// Defined in table: NameBase
type NameBase struct {

	//TName
	TName []*TNameDefine
}

// Defined in table: TName
type TNameDefine struct {

	//id
	Id uint32 `json:"id"`

	//名字
	Name string
}

// 添加init初始实例 "Add By Tse"
var InsNameBaseTable *NameBaseTable

func init() {
	InsNameBaseTable = NewNameBaseTable()
}

// 添加Reload方法 "Add By Tse"
func (self *NameBaseTable) Reload() error {
	return self.Load(self.configfile)
}

// NameBase 访问接口
type NameBaseTable struct {

	// 表格原始数据
	NameBase

	// 索引函数表
	indexFuncByName map[string][]func(*NameBaseTable) error

	// 清空函数表
	clearFuncByName map[string][]func(*NameBaseTable) error

	// 加载前回调
	preFuncList []func(*NameBaseTable) error

	// 加载后回调
	postFuncList []func(*NameBaseTable) error

	TNameById map[uint32]*TNameDefine

	// 配置文件
	configfile string
}

// 从json文件加载
func (self *NameBaseTable) Load(filename string) error {
	self.configfile = filename
	data, err := ioutil.ReadFile(filename)

	if err != nil {
		return err
	}

	var newTab NameBase

	// 读取
	err = json.Unmarshal(data, &newTab)
	if err != nil {
		return err
	}

	// 所有加载前的回调
	for _, v := range self.preFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	// 清除前通知
	for _, list := range self.clearFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 复制数据
	self.NameBase = newTab

	// 生成索引
	for _, list := range self.indexFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 所有完成时的回调
	for _, v := range self.postFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	return nil
}

// 注册外部索引入口, 索引回调, 清空回调
func (self *NameBaseTable) RegisterIndexEntry(name string, indexCallback func(*NameBaseTable) error, clearCallback func(*NameBaseTable) error) {

	indexList, _ := self.indexFuncByName[name]
	clearList, _ := self.clearFuncByName[name]

	if indexCallback != nil {
		indexList = append(indexList, indexCallback)
	}

	if clearCallback != nil {
		clearList = append(clearList, clearCallback)
	}

	self.indexFuncByName[name] = indexList
	self.clearFuncByName[name] = clearList
}

// 注册加载前回调
func (self *NameBaseTable) RegisterPreEntry(callback func(*NameBaseTable) error) {

	self.preFuncList = append(self.preFuncList, callback)
}

// 注册所有完成时回调
func (self *NameBaseTable) RegisterPostEntry(callback func(*NameBaseTable) error) {

	self.postFuncList = append(self.postFuncList, callback)
}

// 创建一个NameBase表读取实例
func NewNameBaseTable() *NameBaseTable {
	return &NameBaseTable{

		indexFuncByName: map[string][]func(*NameBaseTable) error{

			"TName": {func(tab *NameBaseTable) error {

				// TName
				for _, def := range tab.TName {

					if _, ok := tab.TNameById[def.Id]; ok {
						panic(fmt.Sprintf("duplicate index in TNameById: %v", def.Id))
					}

					tab.TNameById[def.Id] = def

				}

				return nil
			}},
		},

		clearFuncByName: map[string][]func(*NameBaseTable) error{

			"TName": {func(tab *NameBaseTable) error {

				// TName

				tab.TNameById = make(map[uint32]*TNameDefine)

				return nil
			}},
		},

		TNameById: make(map[uint32]*TNameDefine),
	}
}
