// Generated by github.com/davyxu/tabtoy
// Version: 2.8.10
// DO NOT EDIT!!
package table

import (
	"fmt"
	"encoding/json"
	"io/ioutil"
)

// Defined in table: ItemBase
type ItemBase struct {

	//ItemBaseData
	ItemBaseData []*ItemBaseDataDefine
}

// Defined in table: ItemBaseData
type ItemBaseDataDefine struct {

	//道具ID
	Id uint32 `json:"id"`

	//道具名
	Name string

	//道具简介
	Desc string

	//排序(从小到大,默认最后)
	Sort int32

	//道具类型
	Type int32

	//卖出价格元宝
	Sold int32

	//真实价格
	RealPrice int32

	//道具图片路径
	Itempath string
}

// 添加init初始实例 "Add By Tse"
var InsItemBaseTable *ItemBaseTable

func init() {
	InsItemBaseTable = NewItemBaseTable()
}

// 添加Reload方法 "Add By Tse"
func (self *ItemBaseTable) Reload() error {
	return self.Load(self.configfile)
}

// ItemBase 访问接口
type ItemBaseTable struct {

	// 表格原始数据
	ItemBase

	// 索引函数表
	indexFuncByName map[string][]func(*ItemBaseTable) error

	// 清空函数表
	clearFuncByName map[string][]func(*ItemBaseTable) error

	// 加载前回调
	preFuncList []func(*ItemBaseTable) error

	// 加载后回调
	postFuncList []func(*ItemBaseTable) error

	ItemBaseDataById map[uint32]*ItemBaseDataDefine

	// 配置文件
	configfile string
}

// 从json文件加载
func (self *ItemBaseTable) Load(filename string) error {
	self.configfile = filename
	data, err := ioutil.ReadFile(filename)

	if err != nil {
		return err
	}

	var newTab ItemBase

	// 读取
	err = json.Unmarshal(data, &newTab)
	if err != nil {
		return err
	}

	// 所有加载前的回调
	for _, v := range self.preFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	// 清除前通知
	for _, list := range self.clearFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 复制数据
	self.ItemBase = newTab

	// 生成索引
	for _, list := range self.indexFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 所有完成时的回调
	for _, v := range self.postFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	return nil
}

// 注册外部索引入口, 索引回调, 清空回调
func (self *ItemBaseTable) RegisterIndexEntry(name string, indexCallback func(*ItemBaseTable) error, clearCallback func(*ItemBaseTable) error) {

	indexList, _ := self.indexFuncByName[name]
	clearList, _ := self.clearFuncByName[name]

	if indexCallback != nil {
		indexList = append(indexList, indexCallback)
	}

	if clearCallback != nil {
		clearList = append(clearList, clearCallback)
	}

	self.indexFuncByName[name] = indexList
	self.clearFuncByName[name] = clearList
}

// 注册加载前回调
func (self *ItemBaseTable) RegisterPreEntry(callback func(*ItemBaseTable) error) {

	self.preFuncList = append(self.preFuncList, callback)
}

// 注册所有完成时回调
func (self *ItemBaseTable) RegisterPostEntry(callback func(*ItemBaseTable) error) {

	self.postFuncList = append(self.postFuncList, callback)
}

// 创建一个ItemBase表读取实例
func NewItemBaseTable() *ItemBaseTable {
	return &ItemBaseTable{

		indexFuncByName: map[string][]func(*ItemBaseTable) error{

			"ItemBaseData": {func(tab *ItemBaseTable) error {

				// ItemBaseData
				for _, def := range tab.ItemBaseData {

					if _, ok := tab.ItemBaseDataById[def.Id]; ok {
						panic(fmt.Sprintf("duplicate index in ItemBaseDataById: %v", def.Id))
					}

					tab.ItemBaseDataById[def.Id] = def

				}

				return nil
			}},
		},

		clearFuncByName: map[string][]func(*ItemBaseTable) error{

			"ItemBaseData": {func(tab *ItemBaseTable) error {

				// ItemBaseData

				tab.ItemBaseDataById = make(map[uint32]*ItemBaseDataDefine)

				return nil
			}},
		},

		ItemBaseDataById: make(map[uint32]*ItemBaseDataDefine),
	}
}
