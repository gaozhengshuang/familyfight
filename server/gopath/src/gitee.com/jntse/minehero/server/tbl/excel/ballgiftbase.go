// Generated by github.com/davyxu/tabtoy
// Version: 2.8.10
// DO NOT EDIT!!
package table

import (
	"fmt"
	"encoding/json"
	"io/ioutil"
)

// Defined in table: TBallGiftbase
type TBallGiftbase struct {

	//TBallGift
	TBallGift []*TBallGiftDefine
}

// Defined in table: TBallGift
type TBallGiftDefine struct {

	//ID
	Id uint32 `json:"id"`

	//名字
	Name string

	//数量
	Num int32

	//道具id
	ItemId int32

	//路径
	Path string

	//概率万分比
	Pro int32

	//1进包裹2加金币
	PushBag int32

	//价值
	Cost int32
}

// 添加init初始实例 "Add By Tse"
var InsTBallGiftbaseTable *TBallGiftbaseTable

func init() {
	InsTBallGiftbaseTable = NewTBallGiftbaseTable()
}

// 添加Reload方法 "Add By Tse"
func (self *TBallGiftbaseTable) Reload() error {
	return self.Load(self.configfile)
}

// TBallGiftbase 访问接口
type TBallGiftbaseTable struct {

	// 表格原始数据
	TBallGiftbase

	// 索引函数表
	indexFuncByName map[string][]func(*TBallGiftbaseTable) error

	// 清空函数表
	clearFuncByName map[string][]func(*TBallGiftbaseTable) error

	// 加载前回调
	preFuncList []func(*TBallGiftbaseTable) error

	// 加载后回调
	postFuncList []func(*TBallGiftbaseTable) error

	TBallGiftById map[uint32]*TBallGiftDefine

	// 配置文件
	configfile string
}

// 从json文件加载
func (self *TBallGiftbaseTable) Load(filename string) error {
	self.configfile = filename
	data, err := ioutil.ReadFile(filename)

	if err != nil {
		return err
	}

	var newTab TBallGiftbase

	// 读取
	err = json.Unmarshal(data, &newTab)
	if err != nil {
		return err
	}

	// 所有加载前的回调
	for _, v := range self.preFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	// 清除前通知
	for _, list := range self.clearFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 复制数据
	self.TBallGiftbase = newTab

	// 生成索引
	for _, list := range self.indexFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 所有完成时的回调
	for _, v := range self.postFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	return nil
}

// 注册外部索引入口, 索引回调, 清空回调
func (self *TBallGiftbaseTable) RegisterIndexEntry(name string, indexCallback func(*TBallGiftbaseTable) error, clearCallback func(*TBallGiftbaseTable) error) {

	indexList, _ := self.indexFuncByName[name]
	clearList, _ := self.clearFuncByName[name]

	if indexCallback != nil {
		indexList = append(indexList, indexCallback)
	}

	if clearCallback != nil {
		clearList = append(clearList, clearCallback)
	}

	self.indexFuncByName[name] = indexList
	self.clearFuncByName[name] = clearList
}

// 注册加载前回调
func (self *TBallGiftbaseTable) RegisterPreEntry(callback func(*TBallGiftbaseTable) error) {

	self.preFuncList = append(self.preFuncList, callback)
}

// 注册所有完成时回调
func (self *TBallGiftbaseTable) RegisterPostEntry(callback func(*TBallGiftbaseTable) error) {

	self.postFuncList = append(self.postFuncList, callback)
}

// 创建一个TBallGiftbase表读取实例
func NewTBallGiftbaseTable() *TBallGiftbaseTable {
	return &TBallGiftbaseTable{

		indexFuncByName: map[string][]func(*TBallGiftbaseTable) error{

			"TBallGift": {func(tab *TBallGiftbaseTable) error {

				// TBallGift
				for _, def := range tab.TBallGift {

					if _, ok := tab.TBallGiftById[def.Id]; ok {
						panic(fmt.Sprintf("duplicate index in TBallGiftById: %v", def.Id))
					}

					tab.TBallGiftById[def.Id] = def

				}

				return nil
			}},
		},

		clearFuncByName: map[string][]func(*TBallGiftbaseTable) error{

			"TBallGift": {func(tab *TBallGiftbaseTable) error {

				// TBallGift

				tab.TBallGiftById = make(map[uint32]*TBallGiftDefine)

				return nil
			}},
		},

		TBallGiftById: make(map[uint32]*TBallGiftDefine),
	}
}
